{"version":3,"sources":["angular-modal-service.js"],"names":["module","angular","factory","$document","$compile","$controller","$http","$rootScope","$q","$templateCache","$timeout","ModalService","self","this","getTemplate","template","templateUrl","deferred","defer","resolve","cachedTemplate","get","then","result","put","data","error","reject","promise","showModal","options","showingClass","modalScope","$new","$scope","closeDeferred","close","delay","preCleanup","cleanup","dismiss","appendElement","removeClass","body","$destroy","modalElement","remove","off","keyDownHandler","$modal","e","keyCode","on","controller","controllerAs","inputs","extend","modalController","modalElementTemplate","element","linkFn","$element","append","addClass","modal","scope"],"mappings":"CAOC,WAEC,YAEA,IAAIA,GAASC,QAAQD,OAAO,yBAE5BA,GAAOE,QAAQ,gBAAiB,YAAa,WAAY,cAAe,QAAS,aAAc,KAAM,iBAAkB,WACrH,SAASC,EAAWC,EAAUC,EAAaC,EAAOC,EAAYC,EAAIC,EAAgBC,GAKlF,QAASC,KAEP,GAAIC,GAAOC,KAKPC,EAAc,SAASC,EAAUC,GACnC,GAAIC,GAAWT,EAAGU,OAElB,IAAIH,EACFE,EAASE,QAAQJ,OAEZ,IAAIC,EAAa,CAEtB,GAAII,GAAiBX,EAAeY,IAAIL,EAEpCI,GACFH,EAASE,QAAQC,GAIjBd,EAAMe,IAAIL,GAAaM,KAAK,SAASC,GAGnCd,EAAee,IAAIR,EAAaO,EAAOE,MAEvCR,EAASE,QAAQI,EAAOE,OAEvB,SAASC,GACVT,EAASU,OAAOD,SAKpBT,GAASU,OAAO,iDAGlB,OAAOV,GAASW,QAGlBhB,GAAKiB,UAAY,SAASC,GAExBA,EAAQC,aAAeD,EAAQC,cAAgB,wBAG/C,IAAId,GAAWT,EAAGU,OAkJlB,OA/IAJ,GAAYgB,EAAQf,SAAUe,EAAQd,aACnCM,KAAK,SAASP,GAGb,GAAIiB,GAAazB,EAAW0B,MAE5BD,GAAWE,OAASF,CAMpB,IAAIG,GAAgB3B,EAAGU,QAEnBkB,EAAQ,SAASb,EAAQc,GAC3BA,EAAQA,GAAS,EAEjBC,IAEA5B,EAAS,WAGPyB,EAAchB,QAAQI,GAEtBgB,KAECF,IAGDG,EAAU,SAASH,GACrBA,EAAQA,GAAS,EAEjBC,IAEA5B,EAAS,WAGPyB,EAAcR,SAEdY,KAECF,IAGDC,EAAa,WAEb5B,EADEoB,EAAQW,cACD,WACPX,EAAQW,cAAcC,YAAYZ,EAAQC,eAInC,WACPY,EAAKD,YAAYZ,EAAQC,iBAK3BQ,EAAU,WAEZP,EAAWY,WAGXC,EAAaC,SAGb3C,EAAU4C,IAAI,UAAWC,GAG3BhB,GAAWiB,QACTb,MAAOA,EACPI,QAASA,EAGX,IAAIQ,GAAiB,SAASE,GAEV,KAAdA,EAAEC,SACJX,IAIJrC,GAAUiD,GAAG,UAAWJ,EAIxB,IAAIK,GAAavB,EAAQuB,YAAc,YAGb,iBAAfA,IAA4BvB,EAAQwB,aAI7CtB,EAAWF,EAAQwB,cAAgBxB,EAAQyB,WAH3CvB,EAAa/B,QAAQuD,OAAOxB,EAAYF,EAAQyB,WAMlD,IAAIE,EAEsB,iBAAfJ,IAA2BvB,EAAQwB,eAG5CD,EAAaA,EAAa,OAASvB,EAAQwB,cAI7CG,EAAkBpD,EAAYgD,EAAYrB,EAG1C,IAAI0B,GAAuBzD,QAAQ0D,QAAQ5C,GAIvC6C,EAASxD,EAASsD,GAElBb,EAAee,EAAO5B,EAE1BA,GAAW6B,SAAWhB,CAGtB,IAAIJ,GAAgBX,EAAQW,cAAgBX,EAAQW,cAAgBE,CAEpEF,GAAcqB,OAAOjB,GAErBnC,EAAS,WACP+B,EAAcsB,SAASjC,EAAQC,eAIjC,IAAIiC,IACFX,WAAYI,EACZQ,MAAOjC,EACP2B,QAASd,EACTtB,OAAQY,EAAcP,QACtBQ,MAAOA,EACPI,QAASA,EAIXvB,GAASE,QAAQ6C,KAGlB1C,KAAK,KAAM,SAASI,GACnBT,EAASU,OAAOD,KAGbT,EAASW,SAlMpB,GAAIe,GAAO1C,QAAQ0D,QAAQxD,EAAU,GAAGwC,KAuMxC,OAAO,IAAIhC","file":"angular-modal-service.min.js","sourcesContent":["//  angularModalService.js\n//\n//  Service for showing modal dialogs.\n\n/***** JSLint Config *****/\n/*global angular  */\n\n(function() {\n\n  'use strict';\n\n  var module = angular.module('angularModalService', []);\n\n  module.factory('ModalService', ['$document', '$compile', '$controller', '$http', '$rootScope', '$q', '$templateCache', '$timeout',\n    function($document, $compile, $controller, $http, $rootScope, $q, $templateCache, $timeout) {\n\n    // Get the body of the document, we'll add the modal to this.\n    var body = angular.element($document[0].body);\n\n    function ModalService() {\n\n      var self = this;\n\n      //  Returns a promise which gets the template, either\n      //  from the template parameter or via a request to the\n      //  templateUrl parameter.\n      var getTemplate = function(template, templateUrl) {\n        var deferred = $q.defer();\n\n        if (template) {\n          deferred.resolve(template);\n\n        } else if (templateUrl) {\n          //  Check to see if the template has already been loaded.\n          var cachedTemplate = $templateCache.get(templateUrl);\n\n          if (cachedTemplate) {\n            deferred.resolve(cachedTemplate);\n\n          } else {\n            //  If not, let's grab the template for the first time.\n            $http.get(templateUrl).then(function(result) {\n\n              //  Save template into the cache and return the template.\n              $templateCache.put(templateUrl, result.data);\n\n              deferred.resolve(result.data);\n\n            }, function(error) {\n              deferred.reject(error);\n            });\n          }\n\n        } else {\n          deferred.reject('No template or templateUrl has been specified.');\n        }\n\n        return deferred.promise;\n      };\n\n      self.showModal = function(options) {\n\n        options.showingClass = options.showingClass || 'angular-modal--showing';\n\n        //  Create a deferred we'll resolve when the modal is ready.\n        var deferred = $q.defer();\n\n        //  Get the actual html of the template.\n        getTemplate(options.template, options.templateUrl)\n          .then(function(template) {\n\n            //  Create a new scope for the modal.\n            var modalScope = $rootScope.$new();\n\n            modalScope.$scope = modalScope;\n\n            //  Create the inputs object to the controller - this will include\n            //  the scope, as well as all inputs provided.\n            //  We will also create a deferred that is resolved with a provided\n            //  close function.\n            var closeDeferred = $q.defer();\n\n            var close = function(result, delay) {\n              delay = delay || 0;\n\n              preCleanup();\n\n              $timeout(function() {\n\n                //  Resolve the 'close' promise.\n                closeDeferred.resolve(result);\n\n                cleanup();\n\n              }, delay);\n            };\n\n            var dismiss = function(delay) {\n              delay = delay || 0;\n\n              preCleanup();\n\n              $timeout(function() {\n\n                //  Reject the 'close' promise.\n                closeDeferred.reject();\n\n                cleanup();\n\n              }, delay);\n            };\n\n            var preCleanup = function() {\n              if (options.appendElement) {\n                $timeout(function() {\n                  options.appendElement.removeClass(options.showingClass);\n                });\n\n              } else {\n                $timeout(function() {\n                  body.removeClass(options.showingClass);\n                });\n              }\n            };\n\n            var cleanup = function() {\n              //  We can now clean up the scope\n              modalScope.$destroy();\n\n              //  ... and remove the element from the DOM\n              modalElement.remove();\n\n              //  ... and finally remove keydown listener.\n              $document.off('keydown', keyDownHandler);\n            };\n\n            modalScope.$modal = {\n              close: close,\n              dismiss: dismiss\n            };\n\n            var keyDownHandler = function(e) {\n              //  Listen for escape key and dismiss modal.\n              if (e.keyCode === 27) {\n                dismiss();\n              }\n            };\n\n            $document.on('keydown', keyDownHandler);\n\n            //  TODO: resolve any promises in options.inputs\n\n            var controller = options.controller || function() {};\n\n            //  Pass inputs to scope.\n            if (typeof controller === 'string' || !options.controllerAs) {\n              modalScope = angular.extend(modalScope, options.inputs || {});\n\n            } else {\n              modalScope[options.controllerAs] = options.inputs || {};\n            }\n\n            var modalController;\n\n            if (typeof controller === 'string' && options.controllerAs) {\n              //  If a 'controllerAs' option has been provided, we change the controller\n              //  name to use 'as' syntax. $controller will automatically handle this.\n              controller = controller + ' as ' + options.controllerAs;\n            }\n\n            //  Create the controller, explicitly specifying the scope to use.\n            modalController = $controller(controller, modalScope);\n\n            //  Parse the modal HTML into a DOM element (in template form).\n            var modalElementTemplate = angular.element(template);\n\n            //  Compile then link the template element, building the actual element.\n            //  Set the $element on the inputs so that it can be injected if required.\n            var linkFn = $compile(modalElementTemplate);\n\n            var modalElement = linkFn(modalScope);\n\n            modalScope.$element = modalElement;\n\n            //  Finally, append the modal to the dom.\n            var appendElement = options.appendElement ? options.appendElement : body;\n\n            appendElement.append(modalElement);\n\n            $timeout(function() {\n              appendElement.addClass(options.showingClass);\n            });\n\n            //  We now have a modal object...\n            var modal = {\n              controller: modalController,\n              scope: modalScope,\n              element: modalElement,\n              result: closeDeferred.promise,\n              close: close,\n              dismiss: dismiss\n            };\n\n            //  ...which is passed to the caller via the promise.\n            deferred.resolve(modal);\n\n          })\n          .then(null, function(error) { // 'catch' doesn't work in IE8.\n            deferred.reject(error);\n          });\n\n        return deferred.promise;\n      };\n\n    }\n\n    return new ModalService();\n  }\n]);\n\n}());\n"],"sourceRoot":"/source/"}